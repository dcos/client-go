/*
 * DC/OS
 *
 * DC/OS API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dcos

// A run specification
type MetronomeV1JobRun struct {
	// An array of strings that represents an alternative mode of specifying the command to run. This was motivated by safe usage of containerizer features like a custom Docker ENTRYPOINT. Either `cmd` or `args` must be supplied. It is invalid to supply both `cmd` and `args` in the same job.
	Args []string `json:"args,omitempty"`
	// Provided URIs are passed to Mesos fetcher module and resolved in runtime.
	Artifacts []MetronomeV1JobRunArtifacts `json:"artifacts,omitempty"`
	// The command that is executed.  This value is wrapped by Mesos via `/bin/sh -c ${job.cmd}`.  Either `cmd` or `args` must be supplied. It is invalid to supply both `cmd` and `args` in the same job.
	Cmd string `json:"cmd,omitempty"`
	// The number of CPU shares this job needs per instance. This number does not have to be integer, but can be a fraction.
	Cpus float64 `json:"cpus"`
	// The number of GPU shares this job needs per instance. This number does not have to be integer, but can be a fraction.
	Gpus int32 `json:"gpus,omitempty"`
	// How much disk space is needed for this job. This number does not have to be an integer, but can be a fraction.
	Disk   int64                    `json:"disk"`
	Ucr    *MetronomeV1JobRunUcr    `json:"ucr,omitempty"`
	Docker *MetronomeV1JobRunDocker `json:"docker,omitempty"`
	Env    map[string]interface{}   `json:"env,omitempty"`
	// The number of seconds until the job needs to be running. If the deadline is reached without successfully running the job, the job is aborted.
	MaxLaunchDelay int32 `json:"maxLaunchDelay,omitempty"`
	// The amount of memory in MB that is needed for the job per instance.
	Mem       int64                       `json:"mem"`
	Placement *MetronomeV1JobRunPlacement `json:"placement,omitempty"`
	// The user to use to run the tasks on the agent.
	User string `json:"user,omitempty"`
	// Configures the number of seconds between escalating from SIGTERM to SIGKILL when signalling tasks to terminate. Using this grace period, tasks should perform orderly shut down immediately upon receiving SIGTERM.
	TaskKillGracePeriodSeconds float32                   `json:"taskKillGracePeriodSeconds,omitempty"`
	Restart                    *MetronomeV1JobRunRestart `json:"restart,omitempty"`
	// The list of volumes for this job.
	Volumes []MetronomeV1JobRunVolumes `json:"volumes,omitempty"`
	Secrets map[string]interface{}     `json:"secrets,omitempty"`
}
