// Code generated by go-swagger; DO NOT EDIT.

package cosmos

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	types "github.com/dcos/client-go/dcos/cosmos/types"
)

// ServicePlanReader is a Reader for the ServicePlan structure.
type ServicePlanReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ServicePlanReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewServicePlanOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewServicePlanNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewServicePlanOK creates a ServicePlanOK with default headers values
func NewServicePlanOK() *ServicePlanOK {
	return &ServicePlanOK{}
}

/*ServicePlanOK handles this case with default header values.

Service plan.
*/
type ServicePlanOK struct {
	Payload *types.PlanDefinition
}

func (o *ServicePlanOK) Error() string {
	return fmt.Sprintf("[GET /service/{appId}/v1/plans/{plan}][%d] servicePlanOK  %+v", 200, o.Payload)
}

func (o *ServicePlanOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(types.PlanDefinition)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewServicePlanNotFound creates a ServicePlanNotFound with default headers values
func NewServicePlanNotFound() *ServicePlanNotFound {
	return &ServicePlanNotFound{}
}

/*ServicePlanNotFound handles this case with default header values.

Service plan not found.
*/
type ServicePlanNotFound struct {
	Payload *types.Error
}

func (o *ServicePlanNotFound) Error() string {
	return fmt.Sprintf("[GET /service/{appId}/v1/plans/{plan}][%d] servicePlanNotFound  %+v", 404, o.Payload)
}

func (o *ServicePlanNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(types.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
