// Code generated by go-swagger; DO NOT EDIT.

package cosmos

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	types "github.com/dcos/client-go/dcos/cosmos/types"
)

// PackageInstallReader is a Reader for the PackageInstall structure.
type PackageInstallReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PackageInstallReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPackageInstallOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPackageInstallBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewPackageInstallConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPackageInstallOK creates a PackageInstallOK with default headers values
func NewPackageInstallOK() *PackageInstallOK {
	return &PackageInstallOK{}
}

/*PackageInstallOK handles this case with default header values.

PackageInstallOK package install o k
*/
type PackageInstallOK struct {
	Payload *types.InstallResponse
}

func (o *PackageInstallOK) Error() string {
	return fmt.Sprintf("[POST /package/install][%d] packageInstallOK  %+v", 200, o.Payload)
}

func (o *PackageInstallOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(types.InstallResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPackageInstallBadRequest creates a PackageInstallBadRequest with default headers values
func NewPackageInstallBadRequest() *PackageInstallBadRequest {
	return &PackageInstallBadRequest{}
}

/*PackageInstallBadRequest handles this case with default header values.

PackageInstallBadRequest package install bad request
*/
type PackageInstallBadRequest struct {
	Payload *types.Error
}

func (o *PackageInstallBadRequest) Error() string {
	return fmt.Sprintf("[POST /package/install][%d] packageInstallBadRequest  %+v", 400, o.Payload)
}

func (o *PackageInstallBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(types.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPackageInstallConflict creates a PackageInstallConflict with default headers values
func NewPackageInstallConflict() *PackageInstallConflict {
	return &PackageInstallConflict{}
}

/*PackageInstallConflict handles this case with default header values.

PackageInstallConflict package install conflict
*/
type PackageInstallConflict struct {
	Payload *types.Error
}

func (o *PackageInstallConflict) Error() string {
	return fmt.Sprintf("[POST /package/install][%d] packageInstallConflict  %+v", 409, o.Payload)
}

func (o *PackageInstallConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(types.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
