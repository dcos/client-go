// Code generated by go-swagger; DO NOT EDIT.

package cosmos

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	types "github.com/dcos/client-go/dcos/cosmos/types"
)

// PackageRepositoryAddReader is a Reader for the PackageRepositoryAdd structure.
type PackageRepositoryAddReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PackageRepositoryAddReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPackageRepositoryAddOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPackageRepositoryAddBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewPackageRepositoryAddConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPackageRepositoryAddOK creates a PackageRepositoryAddOK with default headers values
func NewPackageRepositoryAddOK() *PackageRepositoryAddOK {
	return &PackageRepositoryAddOK{}
}

/*PackageRepositoryAddOK handles this case with default header values.

PackageRepositoryAddOK package repository add o k
*/
type PackageRepositoryAddOK struct {
	Payload *types.PackageAddRepoResponse
}

func (o *PackageRepositoryAddOK) Error() string {
	return fmt.Sprintf("[POST /package/repository/add][%d] packageRepositoryAddOK  %+v", 200, o.Payload)
}

func (o *PackageRepositoryAddOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(types.PackageAddRepoResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPackageRepositoryAddBadRequest creates a PackageRepositoryAddBadRequest with default headers values
func NewPackageRepositoryAddBadRequest() *PackageRepositoryAddBadRequest {
	return &PackageRepositoryAddBadRequest{}
}

/*PackageRepositoryAddBadRequest handles this case with default header values.

PackageRepositoryAddBadRequest package repository add bad request
*/
type PackageRepositoryAddBadRequest struct {
	Payload *types.Error
}

func (o *PackageRepositoryAddBadRequest) Error() string {
	return fmt.Sprintf("[POST /package/repository/add][%d] packageRepositoryAddBadRequest  %+v", 400, o.Payload)
}

func (o *PackageRepositoryAddBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(types.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPackageRepositoryAddConflict creates a PackageRepositoryAddConflict with default headers values
func NewPackageRepositoryAddConflict() *PackageRepositoryAddConflict {
	return &PackageRepositoryAddConflict{}
}

/*PackageRepositoryAddConflict handles this case with default header values.

PackageRepositoryAddConflict package repository add conflict
*/
type PackageRepositoryAddConflict struct {
	Payload *types.Error
}

func (o *PackageRepositoryAddConflict) Error() string {
	return fmt.Sprintf("[POST /package/repository/add][%d] packageRepositoryAddConflict  %+v", 409, o.Payload)
}

func (o *PackageRepositoryAddConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(types.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
