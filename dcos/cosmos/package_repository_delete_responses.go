// Code generated by go-swagger; DO NOT EDIT.

package cosmos

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	types "github.com/dcos/client-go/dcos/cosmos/types"
)

// PackageRepositoryDeleteReader is a Reader for the PackageRepositoryDelete structure.
type PackageRepositoryDeleteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PackageRepositoryDeleteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPackageRepositoryDeleteOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPackageRepositoryDeleteBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPackageRepositoryDeleteNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPackageRepositoryDeleteOK creates a PackageRepositoryDeleteOK with default headers values
func NewPackageRepositoryDeleteOK() *PackageRepositoryDeleteOK {
	return &PackageRepositoryDeleteOK{}
}

/*PackageRepositoryDeleteOK handles this case with default header values.

PackageRepositoryDeleteOK package repository delete o k
*/
type PackageRepositoryDeleteOK struct {
	Payload *types.PackageDeleteRepoResponse
}

func (o *PackageRepositoryDeleteOK) Error() string {
	return fmt.Sprintf("[POST /package/repository/delete][%d] packageRepositoryDeleteOK  %+v", 200, o.Payload)
}

func (o *PackageRepositoryDeleteOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(types.PackageDeleteRepoResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPackageRepositoryDeleteBadRequest creates a PackageRepositoryDeleteBadRequest with default headers values
func NewPackageRepositoryDeleteBadRequest() *PackageRepositoryDeleteBadRequest {
	return &PackageRepositoryDeleteBadRequest{}
}

/*PackageRepositoryDeleteBadRequest handles this case with default header values.

PackageRepositoryDeleteBadRequest package repository delete bad request
*/
type PackageRepositoryDeleteBadRequest struct {
	Payload *types.Error
}

func (o *PackageRepositoryDeleteBadRequest) Error() string {
	return fmt.Sprintf("[POST /package/repository/delete][%d] packageRepositoryDeleteBadRequest  %+v", 400, o.Payload)
}

func (o *PackageRepositoryDeleteBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(types.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPackageRepositoryDeleteNotFound creates a PackageRepositoryDeleteNotFound with default headers values
func NewPackageRepositoryDeleteNotFound() *PackageRepositoryDeleteNotFound {
	return &PackageRepositoryDeleteNotFound{}
}

/*PackageRepositoryDeleteNotFound handles this case with default header values.

PackageRepositoryDeleteNotFound package repository delete not found
*/
type PackageRepositoryDeleteNotFound struct {
	Payload *types.Error
}

func (o *PackageRepositoryDeleteNotFound) Error() string {
	return fmt.Sprintf("[POST /package/repository/delete][%d] packageRepositoryDeleteNotFound  %+v", 404, o.Payload)
}

func (o *PackageRepositoryDeleteNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(types.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
