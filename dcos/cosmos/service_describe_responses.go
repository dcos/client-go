// Code generated by go-swagger; DO NOT EDIT.

package cosmos

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	types "github.com/dcos/client-go/dcos/cosmos/types"
)

// ServiceDescribeReader is a Reader for the ServiceDescribe structure.
type ServiceDescribeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ServiceDescribeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewServiceDescribeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewServiceDescribeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewServiceDescribeOK creates a ServiceDescribeOK with default headers values
func NewServiceDescribeOK() *ServiceDescribeOK {
	return &ServiceDescribeOK{}
}

/*ServiceDescribeOK handles this case with default header values.

ServiceDescribeOK service describe o k
*/
type ServiceDescribeOK struct {
	Payload *types.ServiceDescribeResponse
}

func (o *ServiceDescribeOK) Error() string {
	return fmt.Sprintf("[POST /cosmos/service/describe][%d] serviceDescribeOK  %+v", 200, o.Payload)
}

func (o *ServiceDescribeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(types.ServiceDescribeResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewServiceDescribeBadRequest creates a ServiceDescribeBadRequest with default headers values
func NewServiceDescribeBadRequest() *ServiceDescribeBadRequest {
	return &ServiceDescribeBadRequest{}
}

/*ServiceDescribeBadRequest handles this case with default header values.

ServiceDescribeBadRequest service describe bad request
*/
type ServiceDescribeBadRequest struct {
	Payload *types.Error
}

func (o *ServiceDescribeBadRequest) Error() string {
	return fmt.Sprintf("[POST /cosmos/service/describe][%d] serviceDescribeBadRequest  %+v", 400, o.Payload)
}

func (o *ServiceDescribeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(types.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
