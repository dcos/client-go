// Code generated by go-swagger; DO NOT EDIT.

package cosmos

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	types "github.com/dcos/client-go/dcos/cosmos/types"
)

// PackageUninstallReader is a Reader for the PackageUninstall structure.
type PackageUninstallReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PackageUninstallReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPackageUninstallOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPackageUninstallBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPackageUninstallNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewPackageUninstallConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPackageUninstallOK creates a PackageUninstallOK with default headers values
func NewPackageUninstallOK() *PackageUninstallOK {
	return &PackageUninstallOK{}
}

/*PackageUninstallOK handles this case with default header values.

PackageUninstallOK package uninstall o k
*/
type PackageUninstallOK struct {
	Payload *types.UninstallResponse
}

func (o *PackageUninstallOK) Error() string {
	return fmt.Sprintf("[POST /package/uninstall][%d] packageUninstallOK  %+v", 200, o.Payload)
}

func (o *PackageUninstallOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(types.UninstallResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPackageUninstallBadRequest creates a PackageUninstallBadRequest with default headers values
func NewPackageUninstallBadRequest() *PackageUninstallBadRequest {
	return &PackageUninstallBadRequest{}
}

/*PackageUninstallBadRequest handles this case with default header values.

PackageUninstallBadRequest package uninstall bad request
*/
type PackageUninstallBadRequest struct {
	Payload *types.Error
}

func (o *PackageUninstallBadRequest) Error() string {
	return fmt.Sprintf("[POST /package/uninstall][%d] packageUninstallBadRequest  %+v", 400, o.Payload)
}

func (o *PackageUninstallBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(types.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPackageUninstallNotFound creates a PackageUninstallNotFound with default headers values
func NewPackageUninstallNotFound() *PackageUninstallNotFound {
	return &PackageUninstallNotFound{}
}

/*PackageUninstallNotFound handles this case with default header values.

PackageUninstallNotFound package uninstall not found
*/
type PackageUninstallNotFound struct {
	Payload *types.Error
}

func (o *PackageUninstallNotFound) Error() string {
	return fmt.Sprintf("[POST /package/uninstall][%d] packageUninstallNotFound  %+v", 404, o.Payload)
}

func (o *PackageUninstallNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(types.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPackageUninstallConflict creates a PackageUninstallConflict with default headers values
func NewPackageUninstallConflict() *PackageUninstallConflict {
	return &PackageUninstallConflict{}
}

/*PackageUninstallConflict handles this case with default header values.

PackageUninstallConflict package uninstall conflict
*/
type PackageUninstallConflict struct {
	Payload *types.Error
}

func (o *PackageUninstallConflict) Error() string {
	return fmt.Sprintf("[POST /package/uninstall][%d] packageUninstallConflict  %+v", 409, o.Payload)
}

func (o *PackageUninstallConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(types.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
