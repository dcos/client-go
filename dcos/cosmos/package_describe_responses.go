// Code generated by go-swagger; DO NOT EDIT.

package cosmos

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	types "github.com/dcos/client-go/dcos/cosmos/types"
)

// PackageDescribeReader is a Reader for the PackageDescribe structure.
type PackageDescribeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PackageDescribeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPackageDescribeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPackageDescribeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPackageDescribeOK creates a PackageDescribeOK with default headers values
func NewPackageDescribeOK() *PackageDescribeOK {
	return &PackageDescribeOK{}
}

/*PackageDescribeOK handles this case with default header values.

PackageDescribeOK package describe o k
*/
type PackageDescribeOK struct {
	Payload *types.V3PackageDescribeResponse
}

func (o *PackageDescribeOK) Error() string {
	return fmt.Sprintf("[POST /package/describe][%d] packageDescribeOK  %+v", 200, o.Payload)
}

func (o *PackageDescribeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(types.V3PackageDescribeResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPackageDescribeBadRequest creates a PackageDescribeBadRequest with default headers values
func NewPackageDescribeBadRequest() *PackageDescribeBadRequest {
	return &PackageDescribeBadRequest{}
}

/*PackageDescribeBadRequest handles this case with default header values.

PackageDescribeBadRequest package describe bad request
*/
type PackageDescribeBadRequest struct {
	Payload *types.Error
}

func (o *PackageDescribeBadRequest) Error() string {
	return fmt.Sprintf("[POST /package/describe][%d] packageDescribeBadRequest  %+v", 400, o.Payload)
}

func (o *PackageDescribeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(types.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
