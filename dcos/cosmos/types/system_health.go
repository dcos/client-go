// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// SystemHealth system health
// swagger:model systemHealth
type SystemHealth struct {

	// dcos diagnostics version
	DCOSDiagnosticsVersion string `json:"dcosDiagnosticsVersion,omitempty"`

	// dcos version
	DCOSVersion string `json:"dcosVersion,omitempty"`

	// hostname
	Hostname string `json:"hostname,omitempty"`

	// ip
	IP string `json:"ip,omitempty"`

	// mesos ID
	MesosID string `json:"mesosID,omitempty"`

	// node role
	NodeRole string `json:"nodeRole,omitempty"`

	// units
	Units []*UnitHealth `json:"units"`
}

// Validate validates this system health
func (m *SystemHealth) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUnits(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SystemHealth) validateUnits(formats strfmt.Registry) error {

	if swag.IsZero(m.Units) { // not required
		return nil
	}

	for i := 0; i < len(m.Units); i++ {
		if swag.IsZero(m.Units[i]) { // not required
			continue
		}

		if m.Units[i] != nil {
			if err := m.Units[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("units" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SystemHealth) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SystemHealth) UnmarshalBinary(b []byte) error {
	var res SystemHealth
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
