// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V50PackageDefinition v50 package definition
// swagger:model v50PackageDefinition
type V50PackageDefinition struct {

	// command
	Command *Command `json:"command,omitempty"`

	// config
	Config Config `json:"config,omitempty"`

	// description
	// Required: true
	Description *string `json:"description"`

	// List of versions that this package can downgrade to. If the property is a list containing the string '*', this package can downgrade to any version. If the property is not set or the empty list, this package cannot downgrade.
	DowngradesTo []string `json:"downgradesTo"`

	// True if this package installs a new Mesos framework.
	Framework *bool `json:"framework,omitempty"`

	// licenses
	Licenses Licences `json:"licenses,omitempty"`

	// maintainer
	// Required: true
	Maintainer *string `json:"maintainer"`

	// manager
	Manager *Manager `json:"manager,omitempty"`

	// marathon
	Marathon *Marathon `json:"marathon,omitempty"`

	// The minimum DC/OS Release Version the package can run on.
	// Pattern: ^(?:0|[1-9][0-9]*)(?:\.(?:0|[1-9][0-9]*))*$
	MinDCOSReleaseVersion string `json:"minDcosReleaseVersion,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// packaging version
	// Required: true
	// Enum: [5.0]
	PackagingVersion *string `json:"packagingVersion"`

	// Post installation notes that would be useful to the user of this package.
	PostInstallNotes string `json:"postInstallNotes,omitempty"`

	// Post uninstallation notes that would be useful to the user of this package.
	PostUninstallNotes string `json:"postUninstallNotes,omitempty"`

	// Pre installation notes that would be useful to the user of this package.
	PreInstallNotes string `json:"preInstallNotes,omitempty"`

	// Corresponds to the revision index from the universe directory structure
	// Required: true
	// Minimum: 0
	ReleaseVersion *int64 `json:"releaseVersion"`

	// resource
	Resource *V30Resource `json:"resource,omitempty"`

	// scm
	Scm string `json:"scm,omitempty"`

	// Flag indicating if the package is selected in search results
	Selected *bool `json:"selected,omitempty"`

	// tags
	// Required: true
	Tags []string `json:"tags"`

	// List of versions that can upgrade to this package. If the property is a list containing the string '*', any version can upgrade to this package. If the property is not set or the empty list, no version can upgrade to this package.
	UpgradesFrom []string `json:"upgradesFrom"`

	// version
	// Required: true
	// Pattern: ^[-a-zA-Z0-9.]+$
	Version *string `json:"version"`

	// website
	Website string `json:"website,omitempty"`
}

// Validate validates this v50 package definition
func (m *V50PackageDefinition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommand(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLicenses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaintainer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateManager(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMarathon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinDCOSReleaseVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackagingVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReleaseVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V50PackageDefinition) validateCommand(formats strfmt.Registry) error {

	if swag.IsZero(m.Command) { // not required
		return nil
	}

	if m.Command != nil {
		if err := m.Command.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("command")
			}
			return err
		}
	}

	return nil
}

func (m *V50PackageDefinition) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *V50PackageDefinition) validateLicenses(formats strfmt.Registry) error {

	if swag.IsZero(m.Licenses) { // not required
		return nil
	}

	if err := m.Licenses.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("licenses")
		}
		return err
	}

	return nil
}

func (m *V50PackageDefinition) validateMaintainer(formats strfmt.Registry) error {

	if err := validate.Required("maintainer", "body", m.Maintainer); err != nil {
		return err
	}

	return nil
}

func (m *V50PackageDefinition) validateManager(formats strfmt.Registry) error {

	if swag.IsZero(m.Manager) { // not required
		return nil
	}

	if m.Manager != nil {
		if err := m.Manager.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("manager")
			}
			return err
		}
	}

	return nil
}

func (m *V50PackageDefinition) validateMarathon(formats strfmt.Registry) error {

	if swag.IsZero(m.Marathon) { // not required
		return nil
	}

	if m.Marathon != nil {
		if err := m.Marathon.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("marathon")
			}
			return err
		}
	}

	return nil
}

func (m *V50PackageDefinition) validateMinDCOSReleaseVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.MinDCOSReleaseVersion) { // not required
		return nil
	}

	if err := validate.Pattern("minDcosReleaseVersion", "body", string(m.MinDCOSReleaseVersion), `^(?:0|[1-9][0-9]*)(?:\.(?:0|[1-9][0-9]*))*$`); err != nil {
		return err
	}

	return nil
}

func (m *V50PackageDefinition) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var v50PackageDefinitionTypePackagingVersionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["5.0"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v50PackageDefinitionTypePackagingVersionPropEnum = append(v50PackageDefinitionTypePackagingVersionPropEnum, v)
	}
}

const (

	// V50PackageDefinitionPackagingVersionNr50 captures enum value "5.0"
	V50PackageDefinitionPackagingVersionNr50 string = "5.0"
)

// prop value enum
func (m *V50PackageDefinition) validatePackagingVersionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, v50PackageDefinitionTypePackagingVersionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *V50PackageDefinition) validatePackagingVersion(formats strfmt.Registry) error {

	if err := validate.Required("packagingVersion", "body", m.PackagingVersion); err != nil {
		return err
	}

	// value enum
	if err := m.validatePackagingVersionEnum("packagingVersion", "body", *m.PackagingVersion); err != nil {
		return err
	}

	return nil
}

func (m *V50PackageDefinition) validateReleaseVersion(formats strfmt.Registry) error {

	if err := validate.Required("releaseVersion", "body", m.ReleaseVersion); err != nil {
		return err
	}

	if err := validate.MinimumInt("releaseVersion", "body", int64(*m.ReleaseVersion), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *V50PackageDefinition) validateResource(formats strfmt.Registry) error {

	if swag.IsZero(m.Resource) { // not required
		return nil
	}

	if m.Resource != nil {
		if err := m.Resource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resource")
			}
			return err
		}
	}

	return nil
}

func (m *V50PackageDefinition) validateTags(formats strfmt.Registry) error {

	if err := validate.Required("tags", "body", m.Tags); err != nil {
		return err
	}

	for i := 0; i < len(m.Tags); i++ {

		if err := validate.Pattern("tags"+"."+strconv.Itoa(i), "body", string(m.Tags[i]), `^[^\s]+$`); err != nil {
			return err
		}

	}

	return nil
}

func (m *V50PackageDefinition) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	if err := validate.Pattern("version", "body", string(*m.Version), `^[-a-zA-Z0-9.]+$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V50PackageDefinition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V50PackageDefinition) UnmarshalBinary(b []byte) error {
	var res V50PackageDefinition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
