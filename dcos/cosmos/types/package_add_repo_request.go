// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PackageAddRepoRequest package add repo request
// swagger:model packageAddRepoRequest
type PackageAddRepoRequest struct {

	// index
	// Minimum: 0
	Index *int64 `json:"index,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// uri
	// Required: true
	// Format: uri
	URI URL `json:"uri"`
}

// Validate validates this package add repo request
func (m *PackageAddRepoRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIndex(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURI(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PackageAddRepoRequest) validateIndex(formats strfmt.Registry) error {

	if swag.IsZero(m.Index) { // not required
		return nil
	}

	if err := validate.MinimumInt("index", "body", int64(*m.Index), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *PackageAddRepoRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *PackageAddRepoRequest) validateURI(formats strfmt.Registry) error {

	if err := m.URI.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("uri")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PackageAddRepoRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PackageAddRepoRequest) UnmarshalBinary(b []byte) error {
	var res PackageAddRepoRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
