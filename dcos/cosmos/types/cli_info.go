// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CliInfo cli info
// swagger:model cliInfo
type CliInfo struct {

	// content hash
	// Required: true
	// Min Items: 1
	ContentHash []*Hash `json:"contentHash"`

	// kind
	// Required: true
	// Enum: [executable zip]
	Kind *string `json:"kind"`

	// url
	// Required: true
	// Format: uri
	URL URL `json:"url"`
}

// Validate validates this cli info
func (m *CliInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContentHash(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKind(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CliInfo) validateContentHash(formats strfmt.Registry) error {

	if err := validate.Required("contentHash", "body", m.ContentHash); err != nil {
		return err
	}

	iContentHashSize := int64(len(m.ContentHash))

	if err := validate.MinItems("contentHash", "body", iContentHashSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.ContentHash); i++ {
		if swag.IsZero(m.ContentHash[i]) { // not required
			continue
		}

		if m.ContentHash[i] != nil {
			if err := m.ContentHash[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("contentHash" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var cliInfoTypeKindPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["executable","zip"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cliInfoTypeKindPropEnum = append(cliInfoTypeKindPropEnum, v)
	}
}

const (

	// CliInfoKindExecutable captures enum value "executable"
	CliInfoKindExecutable string = "executable"

	// CliInfoKindZip captures enum value "zip"
	CliInfoKindZip string = "zip"
)

// prop value enum
func (m *CliInfo) validateKindEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, cliInfoTypeKindPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CliInfo) validateKind(formats strfmt.Registry) error {

	if err := validate.Required("kind", "body", m.Kind); err != nil {
		return err
	}

	// value enum
	if err := m.validateKindEnum("kind", "body", *m.Kind); err != nil {
		return err
	}

	return nil
}

func (m *CliInfo) validateURL(formats strfmt.Registry) error {

	if err := m.URL.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("url")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CliInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CliInfo) UnmarshalBinary(b []byte) error {
	var res CliInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
