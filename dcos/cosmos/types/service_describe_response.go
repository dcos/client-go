// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceDescribeResponse service describe response
// swagger:model serviceDescribeResponse
type ServiceDescribeResponse struct {

	// downgrades to
	// Required: true
	DowngradesTo []string `json:"downgradesTo"`

	// package
	// Required: true
	Package *V50PackageDefinition `json:"package"`

	// The result of merging the default package options with the user supplied options
	ResolvedOptions interface{} `json:"resolvedOptions,omitempty"`

	// upgrades to
	// Required: true
	UpgradesTo []string `json:"upgradesTo"`

	// The options the user provided to run the service
	UserProvidedOptions interface{} `json:"userProvidedOptions,omitempty"`
}

// Validate validates this service describe response
func (m *ServiceDescribeResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDowngradesTo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpgradesTo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceDescribeResponse) validateDowngradesTo(formats strfmt.Registry) error {

	if err := validate.Required("downgradesTo", "body", m.DowngradesTo); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDescribeResponse) validatePackage(formats strfmt.Registry) error {

	if err := validate.Required("package", "body", m.Package); err != nil {
		return err
	}

	if m.Package != nil {
		if err := m.Package.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("package")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceDescribeResponse) validateUpgradesTo(formats strfmt.Registry) error {

	if err := validate.Required("upgradesTo", "body", m.UpgradesTo); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceDescribeResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceDescribeResponse) UnmarshalBinary(b []byte) error {
	var res ServiceDescribeResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
