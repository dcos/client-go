// Code generated by go-swagger; DO NOT EDIT.

package cosmos

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	types "github.com/dcos/client-go/dcos/cosmos/types"
)

// HealthchechServiceReader is a Reader for the HealthchechService structure.
type HealthchechServiceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *HealthchechServiceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewHealthchechServiceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewHealthchechServiceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewHealthchechServiceOK creates a HealthchechServiceOK with default headers values
func NewHealthchechServiceOK() *HealthchechServiceOK {
	return &HealthchechServiceOK{}
}

/*HealthchechServiceOK handles this case with default header values.

Service is healthy.
*/
type HealthchechServiceOK struct {
}

func (o *HealthchechServiceOK) Error() string {
	return fmt.Sprintf("[GET /service/{appId}/v1/health][%d] healthchechServiceOK ", 200)
}

func (o *HealthchechServiceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewHealthchechServiceNotFound creates a HealthchechServiceNotFound with default headers values
func NewHealthchechServiceNotFound() *HealthchechServiceNotFound {
	return &HealthchechServiceNotFound{}
}

/*HealthchechServiceNotFound handles this case with default header values.

Service not found.
*/
type HealthchechServiceNotFound struct {
	Payload *types.Error
}

func (o *HealthchechServiceNotFound) Error() string {
	return fmt.Sprintf("[GET /service/{appId}/v1/health][%d] healthchechServiceNotFound  %+v", 404, o.Payload)
}

func (o *HealthchechServiceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(types.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
