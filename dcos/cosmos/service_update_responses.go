// Code generated by go-swagger; DO NOT EDIT.

package cosmos

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	types "github.com/dcos/client-go/dcos/cosmos/types"
)

// ServiceUpdateReader is a Reader for the ServiceUpdate structure.
type ServiceUpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ServiceUpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewServiceUpdateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewServiceUpdateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewServiceUpdateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewServiceUpdateConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewServiceUpdateOK creates a ServiceUpdateOK with default headers values
func NewServiceUpdateOK() *ServiceUpdateOK {
	return &ServiceUpdateOK{}
}

/*ServiceUpdateOK handles this case with default header values.

ServiceUpdateOK service update o k
*/
type ServiceUpdateOK struct {
	Payload *types.ServiceUpdateResponse
}

func (o *ServiceUpdateOK) Error() string {
	return fmt.Sprintf("[POST /cosmos/service/update][%d] serviceUpdateOK  %+v", 200, o.Payload)
}

func (o *ServiceUpdateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(types.ServiceUpdateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewServiceUpdateBadRequest creates a ServiceUpdateBadRequest with default headers values
func NewServiceUpdateBadRequest() *ServiceUpdateBadRequest {
	return &ServiceUpdateBadRequest{}
}

/*ServiceUpdateBadRequest handles this case with default header values.

ServiceUpdateBadRequest service update bad request
*/
type ServiceUpdateBadRequest struct {
	Payload *types.Error
}

func (o *ServiceUpdateBadRequest) Error() string {
	return fmt.Sprintf("[POST /cosmos/service/update][%d] serviceUpdateBadRequest  %+v", 400, o.Payload)
}

func (o *ServiceUpdateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(types.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewServiceUpdateNotFound creates a ServiceUpdateNotFound with default headers values
func NewServiceUpdateNotFound() *ServiceUpdateNotFound {
	return &ServiceUpdateNotFound{}
}

/*ServiceUpdateNotFound handles this case with default header values.

ServiceUpdateNotFound service update not found
*/
type ServiceUpdateNotFound struct {
	Payload *types.Error
}

func (o *ServiceUpdateNotFound) Error() string {
	return fmt.Sprintf("[POST /cosmos/service/update][%d] serviceUpdateNotFound  %+v", 404, o.Payload)
}

func (o *ServiceUpdateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(types.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewServiceUpdateConflict creates a ServiceUpdateConflict with default headers values
func NewServiceUpdateConflict() *ServiceUpdateConflict {
	return &ServiceUpdateConflict{}
}

/*ServiceUpdateConflict handles this case with default header values.

ServiceUpdateConflict service update conflict
*/
type ServiceUpdateConflict struct {
	Payload *types.Error
}

func (o *ServiceUpdateConflict) Error() string {
	return fmt.Sprintf("[POST /cosmos/service/update][%d] serviceUpdateConflict  %+v", 409, o.Payload)
}

func (o *ServiceUpdateConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(types.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
