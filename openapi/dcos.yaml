openapi: 3.0.2
info:
  description: DC/OS API
  title: DC/OS
  version: 1.0.0
servers:
  - url: http://your-dcos-cluster.com
tags:
- description: DC/OS Secrets
  name: secrets
- description: DC/OS Cosmos Package Management
  name: cosmos
- name: IAM
  description: DC/OS Identity and Access Management API
- name: login
  description: Login- and authentication-related endpoints
- name: oidc
  description: OpenID Connect endpoints, including provider management
- name: users
  description: User management endpoints
- name: groups
  description: Group management endpoints
- name: permissions
  description: Permission management endpoints
- name: saml
  description: SAML 2.0 endpoints, including provider management
- name: ldap
  description: Directory (LDAP) back-end configuration and interaction endpoints
- name: edgelb
  description: Create and manage load balancers with DCOS Edge LB API

paths:
  /secrets/v1/secret/{store}/{path-to-secret}:
    delete:
      description: Delete a secret.
      operationId: delete-secret
      parameters:
      - description: The backend to delete the secret from.
        explode: false
        in: path
        name: store
        required: true
        schema:
          type: string
        style: simple
      - description: The path to the secret to delete.
        explode: false
        in: path
        name: path-to-secret
        required: true
        schema:
          type: string
        style: simple
      responses:
        204:
          description: Success.
        403:
          description: Forbidden.
        404:
          description: Secret not found.
      summary: Delete a secret.
      tags:
      - secrets
    get:
      description: Read or list a secret from the store by its path.
      operationId: get-secret
      parameters:
      - description: The backend store from which to get the secret.
        explode: false
        in: path
        name: store
        required: true
        schema:
          type: string
        style: simple
      - description: |
          If set to true, list only secret keys.
        explode: true
        in: query
        name: list
        required: false
        schema:
          type: string
        style: form
      - description: The path to store the secret in.
        explode: false
        in: path
        name: path-to-secret
        required: true
        schema:
          type: string
        style: simple
      responses:
        200:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SecretsV1Secret'
          description: Response body contains secret authorized content.
        400:
          description: Unsupported Accept header.
        403:
          description: Forbidden.
        404:
          description: Secret not found.
      summary: Read or list a secret from the store by its path.
      tags:
      - secrets
    patch:
      description: Update existing secret in the specified store.
      operationId: update-secret
      parameters:
      - description: The backend to store the secret in.
        explode: false
        in: path
        name: store
        required: true
        schema:
          type: string
        style: simple
      - description: The path for the secret to update.
        explode: false
        in: path
        name: path-to-secret
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/SecretsV1Secret'
      responses:
        204:
          description: Secret updated.
        403:
          description: Forbidden.
        404:
          description: Secret not found.
      summary: Update secret.
      tags:
      - secrets
    put:
      description: Create a secret in the store at the path.
      operationId: create-secret
      parameters:
      - description: The backend to store the secret in.
        explode: false
        in: path
        name: store
        required: true
        schema:
          type: string
        style: simple
      - description: The path to store the secret in.
        explode: false
        in: path
        name: path-to-secret
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/SecretsV1Secret'
      responses:
        201:
          description: Secret created.
        400:
          description: Unsupported Content-Type header.
        403:
          description: Forbidden.
        409:
          description: Secret already exists.
      summary: Create a secret in the store at the path.
      tags:
      - secrets
  /acs/api/v1/acls:
    get:
      operationId: getACLs
      summary: Retrieve all ACL objects.
      description: Get array of `ACL` objects.
      tags:
        - IAM
          # - permissions
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: "#/components/schemas/ACL"
  /acs/api/v1/acls/{rid}:
    get:
      operationId: getResourceACLs
      summary: Retrieve ACL for a certain resource.
      description: Retrieve single `ACL` object, for a specific resource.
      tags:
        - IAM
          # - permissions
      parameters:
        - name: rid
          in: path
          required: true
          description: The ID of the resource to retrieve the ACL for.
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ACL"
    put:
      operationId: createResourceACL
      summary: Create ACL for a certain resource.
      description: Create new ACL for resource with ID `rid` (description in body, no
        permissions by default).
      tags:
        - IAM
          # - permissions
      parameters:
        - name: rid
          in: path
          required: true
          description: The ID of the resource for which the ACL should be created.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ACLCreate"
        required: true
      responses:
        "201":
          description: ACL created.
        "409":
          description: Already exists (this resource already has an ACL set).
    patch:
      operationId: updateResourceACL
      summary: Update ACL for a certain resource.
      description: Update ACL for resource with ID `rid`.
      tags:
        - IAM
          # - permissions
      parameters:
        - name: rid
          in: path
          required: true
          description: The ID of the resource for which the ACL should be created.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ACLUpdate"
        description: New ACL.
        required: true
      responses:
        "204":
          description: Success.
    delete:
      operationId: deleteResourceACL
      summary: Delete ACL for a certain resource.
      description: Delete ACL of resource with ID `rid`.
      tags:
        - IAM
          # - permissions
      parameters:
        - name: rid
          in: path
          required: true
          description: The ID of resource for which the ACL should be deleted.
          schema:
            type: string
      responses:
        "204":
          description: Success.
        "404":
          description: ACL not found.
  /acs/api/v1/acls/{rid}/groups/{gid}:
    get:
      operationId: getResourceGroupActions
      summary: Get allowed actions for given resource and group.
      description: Get allowed actions for given resource and group.
      tags:
        - IAM
          # - permissions
      parameters:
        - name: rid
          in: path
          required: true
          description: resource ID
          schema:
            type: string
        - name: gid
          in: path
          required: true
          description: group ID
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: "#/components/schemas/Action"
    delete:
      operationId: forbitResourceGroupActions
      summary: Forbid all actions of given group to given resource.
      description: Forbid all actions of given group to given resource.
      tags:
        - IAM
          # - permissions
      parameters:
        - name: rid
          in: path
          required: true
          description: resource ID.
          schema:
            type: string
        - name: gid
          in: path
          required: true
          description: group ID.
          schema:
            type: string
      responses:
        "204":
          description: Success.
  /acs/api/v1/acls/{rid}/groups/{gid}/{action}:
    get:
      operationId: getResourceGroupAction
      summary: Query whether action is allowed or not.
      description: Query whether action is allowed or not.
      tags:
        - IAM
          # - permissions
      parameters:
        - name: rid
          in: path
          required: true
          description: resource ID
          schema:
            type: string
        - name: gid
          in: path
          required: true
          description: group ID
          schema:
            type: string
        - name: action
          in: path
          required: true
          description: action name
          schema:
            type: string
      responses:
        "200":
          description: Boolean answer in JSON response body.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActionAllowed"
    put:
      operationId: permitResourceGroupAction
      summary: Permit single action for given resource and group.
      description: Permit single action for given resource and group.
      tags:
        - IAM
          # - permissions
      parameters:
        - name: rid
          in: path
          required: true
          description: resource ID.
          schema:
            type: string
        - name: gid
          in: path
          required: true
          description: group ID.
          schema:
            type: string
        - name: action
          in: path
          required: true
          description: action name
          schema:
            type: string
      responses:
        "204":
          description: Success.
    delete:
      operationId: forbitResourceGroupAction
      summary: Forbid single action for given resource and group.
      description: Forbid single action for given resource and group.
      tags:
        - IAM
          # - permissions
      parameters:
        - name: rid
          in: path
          required: true
          description: resource ID.
          schema:
            type: string
        - name: gid
          in: path
          required: true
          description: group ID.
          schema:
            type: string
        - name: action
          in: path
          required: true
          description: action name
          schema:
            type: string
      responses:
        "204":
          description: Success.
  /acs/api/v1/acls/{rid}/permissions:
    get:
      operationId: getResourcePermissions
      summary: Retrieve all permissions for resource.
      description: Retrieve all permissions that are set for a specific resource.
      tags:
        - IAM
          # - permissions
      parameters:
        - name: rid
          in: path
          required: true
          description: resource ID
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ACLPermissions"
  /acs/api/v1/acls/{rid}/users/{uid}:
    get:
      operationId: getResourceUserActions
      summary: Get allowed actions for given resource and user.
      description: Get allowed actions for given resource and user.
      tags:
        - IAM
          # - permissions
      parameters:
        - name: rid
          in: path
          required: true
          description: resource ID
          schema:
            type: string
        - name: uid
          in: path
          required: true
          description: account ID
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: "#/components/schemas/Action"
    delete:
      operationId: forbidResourceUserActions
      summary: Forbid all actions of given account to given resource.
      description: Forbid all actions of given account to given resource.
      tags:
        - IAM
          # - permissions
      parameters:
        - name: rid
          in: path
          required: true
          description: resource ID.
          schema:
            type: string
        - name: uid
          in: path
          required: true
          description: account ID.
          schema:
            type: string
      responses:
        "204":
          description: Success.
  /acs/api/v1/acls/{rid}/users/{uid}/{action}:
    get:
      operationId: getResourceUserAction
      summary: Query whether action is allowed or not.
      description: Query whether action is allowed or not.
      tags:
        - IAM
          # - permissions
      parameters:
        - name: rid
          in: path
          required: true
          description: resource ID
          schema:
            type: string
        - name: uid
          in: path
          required: true
          description: account ID
          schema:
            type: string
        - name: action
          in: path
          required: true
          description: action name
          schema:
            type: string
      responses:
        "200":
          description: Boolean answer in JSON response body.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActionAllowed"
    put:
      operationId: permitResourceUserAction
      summary: Permit single action for given account and resource.
      description: Permit single action for given account and resource.
      tags:
        - IAM
          # - permissions
      parameters:
        - name: rid
          in: path
          required: true
          description: resource ID.
          schema:
            type: string
        - name: uid
          in: path
          required: true
          description: account ID.
          schema:
            type: string
        - name: action
          in: path
          required: true
          description: action name
          schema:
            type: string
      responses:
        "204":
          description: Success.
        "409":
          description: Already exists (this account already has this action).
    delete:
      operationId: forbidResourceUserAction
      summary: Forbid single action for given account and resource.
      description: Forbid single action for given account and resource.
      tags:
        - IAM
          # - permissions
      parameters:
        - name: rid
          in: path
          required: true
          description: resource ID.
          schema:
            type: string
        - name: uid
          in: path
          required: true
          description: account ID.
          schema:
            type: string
        - name: action
          in: path
          required: true
          description: action name
          schema:
            type: string
      responses:
        "204":
          description: Success.
  /acs/api/v1/auth/jwks:
    get:
      operationId: getJWKS
      summary: Get the IAM's JSON Web Key Set (JWKS, according to RFCs 7517/7518).
      description: "This endpoint provides the IAM's JSON Web Key Set (JWKS), exposing
        public key details required for the process of DC/OS authentication
        token verification: the public key material can be used for verifying
        authentication tokens signed by the IAM's private key. The DC/OS
        authentication token is a JSON Web Token (JWT) of type RS256, and is
        required to have the two claims `exp` and `uid`. For interpretation of
        the data provided by the JWKS endpoint see
        https://tools.ietf.org/html/rfc7517 and
        https://tools.ietf.org/html/rfc7518."
      tags:
        - IAM
      responses:
        "200":
          description: The response body contains a JSON Web Key Set document.
  /acs/api/v1/auth/login:
    post:
      operationId: login
      summary: Log in (obtain a DC/OS authentication token).
      description: "Exchange user credentials (regular user account: uid and password;
        service user account: uid and service login token) for a DC/OS
        authentication token. The resulting DC/OS authentication token is an RFC
        7519 JSON Web Token (JWT) of type RS256. It has a limited lifetime which
        depends on the IAM configuration (only, i.e. the lifetime cannot be
        chosen as part of the login HTTP request). The DC/OS authentication
        token can be verified out-of-band using a standards-compliant RS256 JWT
        verification procedure based on the long-lived public key material
        presented by the IAM's /auth/jwks endpoint, and by requiring the two
        claims `exp` and `uid` to be present."
      tags:
        - IAM
        # - login
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginObject"
        description: uid & password or uid & service login token.
        required: true
      responses:
        "200":
          description: Login successful. The response body contains a JSON object providing
            the authentication token.
          headers:
            Set-Cookie:
              description: A cookie containing the auth token (implementation detail for
                browser support, should not be of interest to general API
                consumers).
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthToken"
        "401":
          description: Login failed.
    get:
      operationId: loginWithProvider
      summary: Log in using an external identity provider.
      description: Log in using an external identity provider (via e.g. OpenID Connect), as
        specified via query parameter. This request initiates a single sign-on
        flow.
      tags:
        - IAM
          # - login
      parameters:
        - name: oidc-provider
          description: OIDC provider ID
          in: query
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Redirect to the identity provider.
  /acs/api/v1/auth/oidc/callback:
    get:
      operationId: openIDConnectCallbackURL
      summary: OpenID Connect callback URL.
      description: After successfully logging in to an OpenID Connect identity provider,
        the end-user is being redirected back to the IAM via this callback URL.
        API consumers are not required to explicitly interact with this
        endpoint. This URL usually needs to be handed over to an OpenID Connect
        provider (often called "redirect" or "callback" URL).
      tags:
        - IAM
          # - oidc
      responses:
        "302":
          description: OIDC authentication flow successful.
        "401":
          description: Problem in authentication flow.
  /acs/api/v1/auth/oidc/providers:
    get:
      operationId: getOIDCProviders
      summary: Get an overview for the configured OIDC providers.
      description: Get an overview for the configured OIDC providers. The response contains
        a JSON object, with each key being an OIDC provider ID, and each value
        being the corresponding provider description string. This endpoint does
        not expose sensitive provider configuration details.
      tags:
        - IAM
          # - oidc
      responses:
        "200":
          description: Success.
  /acs/api/v1/auth/oidc/providers/{provider-id}:
    get:
      operationId: getOIDCProvider
      summary: Get configuration for a specific provider.
      description: Get configuration for a specific provider.
      tags:
        - IAM
          # - oidc
      parameters:
        - name: provider-id
          in: path
          required: true
          description: The ID of the OIDC provider to retrieve the config for.
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OIDCProviderConfig"
    put:
      operationId: configureOIDCProvider
      summary: Configure a new OIDC provider.
      description: Set up OIDC provider with the ID as specified in the URL, and with the
        config as specified via JSON in the request body.
      tags:
        - IAM
          # - oidc
      parameters:
        - name: provider-id
          in: path
          required: true
          description: The ID of the provider to create.
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/OIDCProviderConfig"
      responses:
        "201":
          description: Provider created.
        "409":
          description: Provider already exists.
    patch:
      operationId: updateOIDCProvider
      summary: Update OIDC provider config.
      description: Update config for existing OIDC provider.
      tags:
        - IAM
          # - oidc
      parameters:
        - name: provider-id
          in: path
          required: true
          description: The ID of the provider to modify.
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/OIDCProviderConfig"
      responses:
        "204":
          description: Update applied.
        "400":
          description: Various errors (e.g. provider not yet configured).
    delete:
      operationId: deleteOIDCProvider
      summary: Delete provider.
      description: Delete provider (disables authentication with that provider).
      tags:
        - IAM
          # - oidc
      parameters:
        - name: provider-id
          in: path
          required: true
          description: The ID of the OIDC provider to delete.
          schema:
            type: string
      responses:
        "204":
          description: Success.
  /acs/api/v1/auth/saml/providers:
    get:
      operationId: getSAMLProviders
      summary: Get an overview for the configured SAML 2.0 providers.
      description: Get an overview for the configured SAML 2.0 providers. The response
        contains a JSON object, with each key being a SAML provider ID, and each
        value being the corresponding provider description string. This endpoint
        does not expose sensitive provider configuration details.
      tags:
        - IAM
          # - saml
      responses:
        "200":
          description: Success.
  /acs/api/v1/auth/saml/providers/{provider-id}:
    get:
      operationId: getSAMLProvider
      summary: Get configuration for a specific SAML provider.
      description: Get configuration for a specific SAML provider.
      tags:
        - IAM
          # - saml
      parameters:
        - name: provider-id
          in: path
          required: true
          description: The ID of the SAML provider to retrieve the config for.
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SAMLProviderConfig"
    put:
      operationId: configureSAMLProvider
      summary: Configure a new SAML provider.
      description: Set up a SAML provider with the ID as specified in the URL, and with the
        config as given by the JSON document in the request body.
      tags:
        - IAM
          # - saml
      parameters:
        - name: provider-id
          in: path
          required: true
          description: The ID of the provider to create.
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/SAMLProviderConfig"
      responses:
        "201":
          description: Provider created.
        "409":
          description: Provider already exists.
    patch:
      operationId: updateSAMLProvider
      summary: Update SAML provider config.
      description: Update config for existing SAML provider.
      tags:
        - IAM
          # - saml
      parameters:
        - name: provider-id
          in: path
          required: true
          description: The ID of the provider to modify.
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/SAMLProviderConfig"
      responses:
        "204":
          description: Update applied.
        "400":
          description: Various errors (e.g. provider not yet configured).
    delete:
      operationId: deleteSAMLProvider
      summary: Delete provider.
      description: Delete provider (disables authentication with that provider).
      tags:
        - IAM
          # - saml
      parameters:
        - name: provider-id
          in: path
          required: true
          description: The ID of the SAML provider to delete.
          schema:
            type: string
      responses:
        "204":
          description: Success.
  /acs/api/v1/auth/saml/providers/{provider-id}/acs-callback:
    post:
      operationId: SAMLProviderACSCallbackEndpoint
      summary: The SP ACS callback endpoint.
      description: The IAM acts as SAML service provider (SP). As part of the
        authentication flow, a SAML identity provider (IdP) makes the end-user
        submit an authentication response to this endpoint.
      tags:
        - IAM
          # - saml
      parameters:
        - name: provider-id
          in: path
          required: true
          description: The ID of the provider the authentication response is meant for.
          schema:
            type: string
      responses:
        "302":
          description: SAML authentication flow successful.
        "401":
          description: Problem in authentication flow.
  /acs/api/v1/auth/saml/providers/{provider-id}/acs-callback-url:
    get:
      operationId: getSAMLProviderACSCallbackURL
      summary: Get the authentication callback URL for this SP.
      description: The IAM acts as SAML service provider (SP). A SAML identity provider
        (IdP) usually requires to be configured with the Assertion Consumer
        Service (ACS) callback URL of the SP (which is where the IdP makes the
        end-user submit the authentication response).
      tags:
        - IAM
          # - saml
      parameters:
        - name: provider-id
          in: path
          required: true
          description: The ID of the SAML provider to retrieve the ACS callback URL for.
          schema:
            type: string
      responses:
        "200":
          description: The response body contains a JSON object declaring the callback URL
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SAMLACSCallbackUrlObject"
  /acs/api/v1/auth/saml/providers/{provider-id}/sp-metadata:
    get:
      operationId: getSAMLProviderSPMetadata
      summary: Get SP metadata (XML).
      description: The IAM acts as SAML service provider (SP). This endpoint provides the
        SP metadata as an XML document. Certain identity providers (IdPs) may
        want to directly consume this document.
      tags:
        - IAM
          # - saml
      parameters:
        - name: provider-id
          in: path
          required: true
          description: The ID of the SAML provider to retrieve the metadata for.
          schema:
            type: string
      responses:
        "200":
          description: The response body contains the metadata in UTF-8 encoding, setting
            the Content-Type to `application/samlmetadata+xml`.
  /acs/api/v1/groups:
    get:
      operationId: getGroups
      summary: Retrieve all group objects.
      description: Retrieve array of `Group` objects.
      tags:
        - IAM
          # - groups
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: "#/components/schemas/Group"
  /acs/api/v1/groups/{gid}:
    get:
      operationId: getGroup
      summary: Get single group object.
      description: Get specific `Group` object.
      tags:
        - IAM
          # - groups
      parameters:
        - name: gid
          in: path
          required: true
          description: The ID of the group to retrieve.
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
    put:
      operationId: createGroup
      summary: Create a group.
      description: Create a group.
      tags:
        - IAM
          # - groups
      parameters:
        - name: gid
          in: path
          required: true
          description: The ID of the group.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GroupCreate"
        required: true
      responses:
        "201":
          description: Group created.
        "409":
          description: Group exists.
    patch:
      operationId: updateGroup
      summary: Update group.
      description: Update existing group (description).
      tags:
        - IAM
          # - groups
      parameters:
        - name: gid
          in: path
          required: true
          description: The ID of the group to modify.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GroupUpdate"
        required: true
      responses:
        "204":
          description: Update applied.
    delete:
      operationId: deleteGroup
      summary: Delete group.
      description: Delete group.
      tags:
        - IAM
          # - groups
      parameters:
        - name: gid
          in: path
          required: true
          description: The ID of the group to delete.
          schema:
            type: string
      responses:
        "204":
          description: Success
  /acs/api/v1/groups/{gid}/permissions:
    get:
      operationId: getGroupPermissions
      summary: Retrieve group permissions.
      description: Retrieve permissions of this group.
      tags:
        - IAM
          # - groups
      parameters:
        - name: gid
          in: path
          required: true
          description: The group ID.
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupPermissions"
  /acs/api/v1/groups/{gid}/users:
    get:
      operationId: getGroupUsers
      summary: Retrieve members of a group.
      description: Retrieve users that are member of this group. Allows to query service
        accounts, defaults to list only user accounts.
      tags:
        - IAM
          # - groups
      parameters:
        - name: gid
          in: path
          required: true
          description: The group ID.
          schema:
            type: string
        - name: type
          in: query
          description: If set to `service`, list only service accounts. If unset, default
            to only listing user accounts members of a group.
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupUsers"
  /acs/api/v1/groups/{gid}/users/{uid}:
    delete:
      operationId: deleteGroupUser
      summary: Delete user account from group.
      description: Delete user account from group.
      tags:
        - IAM
          # - groups
      parameters:
        - name: gid
          in: path
          required: true
          description: The ID of the group to delete from.
          schema:
            type: string
        - name: uid
          in: path
          required: true
          description: The ID of the user account.
          schema:
            type: string
      responses:
        "204":
          description: Success.
    put:
      operationId: createGroupUser
      summary: Add account to group.
      description: Add account to group.
      tags:
        - IAM
          # - groups
      parameters:
        - name: gid
          in: path
          required: true
          description: The ID of the group to add the user account to.
          schema:
            type: string
        - name: uid
          description: The ID of the account to add.
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Success
        "409":
          description: account is already part of the group.
  /acs/api/v1/ldap/config:
    get:
      operationId: getLDAPConfiguration
      summary: Retrieve current LDAP configuration.
      description: Retrieve current directory (LDAP) back-end configuration.
      tags:
        - IAM
          # - ldap
      responses:
        "200":
          description: The response body contains a JSON object providing the current
            configuration.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LDAPConfiguration"
        "400":
          description: Various errors. If no config has yet been stored, the custom error
            code `ERR_LDAP_CONFIG_NOT_AVAILABLE` is set in the response.
    put:
      operationId: createLDAPConfiguration
      summary: Set new LDAP configuration.
      description: Set new directory (LDAP) back-end configuration. Replace current
        configuration, if existing.
      tags:
        - IAM
          # - ldap
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LDAPConfiguration"
        description: JSON object containing the LDAP configuration details.
        required: true
      responses:
        "200":
          description: Configuration has been persisted. Basic validation tests passed, but
            the directory service was not contacted. You're encouraged to now
            perform a basic feature check against the directory back-end with
            the newly set configuration by using the the config test endpoint.
        "400":
          description: Various errors. If the configuration object itself is invalid, the
            custom error code `ERR_LDAP_CONFIG_INVALID` is set in the response
            and a description sheds light onto the problem specifics.
    delete:
      operationId: deleteLDAPConfiguration
      summary: Delete current LDAP configuration.
      description: Delete current directory (LDAP) back-end configuration. This deactivates
        the LDAP authentication.
      tags:
        - IAM
          # - ldap
      responses:
        "204":
          description: Configuration deleted.
        "400":
          description: Various errors. If no config has yet been stored, the custom error
            code `ERR_LDAP_CONFIG_NOT_AVAILABLE` is set in the response.
  /acs/api/v1/ldap/config/test:
    post:
      operationId: testLDAPBackendConnection
      summary: Test connection to the LDAP back-end.
      description: Perform basic feature tests. Verify that the current directory (LDAP)
        configuration parameters allow for a successful connection to the
        directory back-end. For instance, this endpoint simulates the procedure
        for authentication via LDAP, but provides more useful feedback upon
        failure than the actual login endpoint.
      tags:
        - IAM
          # - ldap
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LDAPTestCredentials"
        description: JSON object containing `uid` and password of an LDAP user. For the
          most expressive test result, choose credentials different from the
          lookup credentials. The `uid` is the string the user is supposed to
          log in with after successful LDAP back-end configuration.
        required: true
      responses:
        "200":
          description: Directory back-end was reached and all feature tests passed.
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/LDAPTestResultObject"
        "502":
          description: Either there was a connection error or one of the feature tests
            failed. To distinguish this response from a proxy-generated 502, a
            JSON object is included in the response. It contains a message in
            its `description` property, describing the problem in more detail.
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/LDAPTestResultObject"
  /acs/api/v1/ldap/importgroup:
    post:
      operationId: importLDAPGroup
      summary: Import an LDAP group.
      description: Attempt to import a group of users from the configured directory (LDAP)
        back-end. See docs/ldap.md for details on group import.
      tags:
        - IAM
          # - ldap
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LDAPImportGroupObject"
        description: A JSON object specifying the name of the group to be imported. The
          meaning of the name depends on the group search settings.
        required: true
      responses:
        "201":
          description: Success.
        "400":
          description: Various errors. If no directory back-end has been configured yet,
            the custom error code `ERR_LDAP_CONFIG_NOT_AVAILABLE` is set in the
            response. If there was no LDAP search result or an error occured
            during the search process, one of the custom error codes
            `ERR_LDAP_IMPORT_GROUP_NOT_FOUND` and
            `ERR_LDAP_IMPORT_SEARCH_FAILED` is set in the response, and a
            description is provided to report the problem specifics.
  /acs/api/v1/ldap/importuser:
    post:
      operationId: importLDAPUser
      summary: Import an LDAP user.
      description: Attempt to import a user from the configured directory (LDAP) back-end.
      tags:
        - IAM
          # - ldap
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LDAPImportUserObject"
        description: 'A JSON object specifying the username (read: "login" or "user ID") of
          the user that should be imported. That string is equivalent to the
          `uid` the user is supposed to log in with after successful import. The
          exact meaning of this string depends on the configured LDAP
          authentication method.'
        required: true
      responses:
        "201":
          description: Success.
        "400":
          description: Various errors. If no directory back-end has been configured yet,
            the custom error code `ERR_LDAP_CONFIG_NOT_AVAILABLE` is set in the
            response. If there was no LDAP search result or an error occured
            during the search process, one of the custom error codes
            `ERR_LDAP_IMPORT_USER_NOT_FOUND` and `ERR_LDAP_IMPORT_SEARCH_FAILED`
            is set in the response, and a description is provided to report the
            problem specifics.
  /acs/api/v1/users:
    get:
      operationId: getUsers
      summary: Retrieve all regular user accounts or service user accounts.
      description: Retrieve `User` objects. By default the list consists of regular user
        accounts, only. Alternatively, service user accounts may be requested
        instead.
      tags:
        - IAM
          # - users
      parameters:
        - name: type
          in: query
          description: If set to `service`, list only service user accounts. If unset,
            default to only listing regular user accounts.
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                type: object
                properties:
                  array:
                    type: array
                    items:
                      $ref: "#/components/schemas/User"
  /acs/api/v1/users/{uid}:
    get:
      operationId: getUser
      summary: Get single user object.
      description: Get specific `User` object.
      tags:
        - IAM
          # - users
      parameters:
        - name: uid
          in: path
          required: true
          description: The ID of the user object to retrieve.
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    put:
      operationId: createUser
      summary: Create user account.
      description: Create user (uid in url, details incl. credentials in body).
      tags:
        - IAM
          # - users
      parameters:
        - name: uid
          in: path
          required: true
          description: The ID of the user account to create.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreate"
        description: Password/description.
        required: true
      responses:
        "201":
          description: User created.
        "409":
          description: User already exists.
    patch:
      operationId: updateUser
      summary: Update user account.
      description: Update existing user account (meta data and/or password).
      tags:
        - IAM
          # - users
      parameters:
        - name: uid
          in: path
          required: true
          description: The ID of the user account to modify.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdate"
        description: Password/description.
        required: true
      responses:
        "204":
          description: Update applied.
        "501":
          description: Not implemented for service user accounts.
    delete:
      operationId: deleteUser
      summary: Delete account.
      description: Delete account.
      tags:
        - IAM
          # - users
      parameters:
        - name: uid
          in: path
          required: true
          description: The ID of the user account to delete.
          schema:
            type: string
      responses:
        "204":
          description: Success.
        "400":
          description: Bad request.
        "404":
          description: User account not found.
  /acs/api/v1/users/{uid}/groups:
    get:
      operationId: getUserGroups
      summary: Retrieve groups the user is member of.
      description: Retrieve groups the user is member of.
      tags:
        - IAM
          # - users
      parameters:
        - name: uid
          in: path
          required: true
          description: The ID of the user.
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserGroups"
  /acs/api/v1/users/{uid}/permissions:
    get:
      operationId: getUserPermissions
      summary: Retrieve permissions an account has.
      description: Retrieve the permissions for this account with direct permissions
        distinguished from those that are obtained through group membership.
      tags:
        - IAM
          # - users
      parameters:
        - name: uid
          in: path
          required: true
          description: The id of the user.
          schema:
            type: string
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPermissions"

  /cosmos/service/describe:
    post:
      description: Describes a DC/OS Service
      operationId: service-describe
      requestBody:
        content:
          application/vnd.dcos.service.describe-request+json;charset=utf-8;version=v1:
            schema:
              $ref: '#/components/schemas/CosmosServiceDescribeV1Request'
      responses:
        200:
          description: Request successful
          content:
            application/vnd.dcos.service.describe-response+json;charset=utf-8;version=v1:
              schema:
                $ref: '#/components/schemas/CosmosServiceDescribeV1Response'
        400:
          description: Request failed due to a bad request
          content:
            application/vnd.dcos.service.describe-response+json;charset=utf-8;version=v1:
              schema:
                $ref: '#/components/schemas/CosmosError'
      tags:
      - cosmos
  /cosmos/service/update:
    post:
      description: Runs a service update.
      operationId: service-update
      requestBody:
        content:
          application/vnd.dcos.service.update-request+json;charset=utf-8;version=v1:
            schema:
              $ref: '#/components/schemas/CosmosServiceUpdateV1Request'
        required: true
      responses:
        200:
          description: Service update successful
          content:
            application/vnd.dcos.service.update-response+json;charset=utf-8;version=v1:
              schema:
                $ref: '#/components/schemas/CosmosServiceUpdateV1Response'
        400:
          description: Service update failed due to a bad request
          content:
            application/vnd.dcos.service.update-response+json;charset=utf-8;version=v1:
              schema:
                $ref: '#/components/schemas/CosmosError'
        404:
          description: Service update failed because the request contains non-existant information
          content:
            application/vnd.dcos.service.update-response+json;charset=utf-8;version=v1:
              schema:
                $ref: '#/components/schemas/CosmosError'
        409:
          description: Service update failed due to version conflict
          content:
            application/vnd.dcos.service.update-response+json;charset=utf-8;version=v1:
              schema:
                $ref: '#/components/schemas/CosmosError'
      tags:
      - cosmos

  /package/describe:
    post:
      description: Show information about the package, including the required resources and configuration to start the service, and command line extensions that are included with the package.
      operationId: package-describe
      requestBody:
        content:
          application/vnd.dcos.package.describe-request+json;charset=utf-8;version=v1:
            schema:
              $ref: '#/components/schemas/CosmosPackageDescribeV1Request'
      responses:
        200:
          description: Request successful
          content:
            application/vnd.dcos.package.describe-response+json;charset=utf-8;version=v3:
              schema:
                $ref: '#/components/schemas/CosmosPackageDescribeV3Response'
        400:
          description: Request failed due to a bad request
          content:
            application/vnd.dcos.package.error+json;charset=utf-8;version=v1:
              schema:
                $ref: '#/components/schemas/CosmosError'
      tags:
      - cosmos

  /package/install:
    post:
      description: Runs a service from a Universe package.
      operationId: package-install
      requestBody:
        content:
          application/vnd.dcos.package.install-request+json;charset=utf-8;version=v1:
            schema:
              $ref: '#/components/schemas/CosmosPackageInstallV1Request'
        required: true
      responses:
        200:
          description: Package successfully installed
          content:
            application/vnd.dcos.package.install-response+json;charset=utf-8;version=v1:
              schema:
                $ref: '#/components/schemas/CosmosPackageInstallV1Response'
        400:
          description: Package could not be installed due to a bad request
          content:
            application/vnd.dcos.package.error+json;charset=utf-8;version=v1:
              schema:
                $ref: '#/components/schemas/CosmosError'
        409:
          description: Package could not be installed due to a version conflict
          content:
            application/vnd.dcos.package.error+json;charset=utf-8;version=v1:
              schema:
                $ref: '#/components/schemas/CosmosError'
      tags:
      - cosmos
  /package/repository/add:
    post:
      description: |
        Adds a package repository (for example Universe) for use by DC/OS. To add a package
        repository to the beginning of the list set the index to zero (0). To add a package
        repository to the end of the list do not specify an index.
      operationId: package-repository-add
      requestBody:
        content:
          application/vnd.dcos.package.repository.add-request+json;charset=utf-8;version=v1:
            schema:
              $ref: '#/components/schemas/CosmosPackageAddRepoV1Request'
      responses:
        200:
          description: Adding a package repository was successful
          content:
            application/vnd.dcos.package.repository.add-response+json;charset=utf-8;version=v1:
              schema:
                $ref: '#/components/schemas/CosmosPackageAddRepoV1Response'
        400:
          description: Adding a package repository failed due to a bad request
          content:
            application/vnd.dcos.package.error+json;charset=utf-8;version=v1:
              schema:
                $ref: '#/components/schemas/CosmosError'
        409:
          description: Adding a package repository failed due to a version conflict
          content:
            application/vnd.dcos.package.error+json;charset=utf-8;version=v1:
              schema:
                $ref: '#/components/schemas/CosmosError'
      tags:
      - cosmos
  /package/repository/delete:
    post:
      description: Deletes a package repository (for example Universe) from DC/OS.
      operationId: package-repository-delete
      requestBody:
        content:
          application/vnd.dcos.package.repository.delete-request+json;charset=utf-8;version=v1:
            schema:
              $ref: '#/components/schemas/CosmosPackageDeleteRepoV1Request'
      responses:
        200:
          description: Deletion of package repository successful
          content:
            application/vnd.dcos.package.repository.delete-response+json;charset=utf-8;version=v1:
              schema:
                $ref: '#/components/schemas/CosmosPackageDeleteRepoV1Response'
        400:
          description: Deletion of package repository failed due to a bad request
          content:
            application/vnd.dcos.package.error+json;charset=utf-8;version=v1:
              schema:
                $ref: '#/components/schemas/CosmosError'
        404:
          description: Deletion of package repository failed because the package does not exist
          content:
            application/vnd.dcos.package.error+json;charset=utf-8;version=v1:
              schema:
                $ref: '#/components/schemas/CosmosError'
      tags:
      - cosmos
  /package/search:
    post:
      description: |
        Lists all matching packages in the repository given a partial pattern.
        The character \'\*\' can be used to match any number of characters.
      operationId: package-search
      requestBody:
        content:
          application/vnd.dcos.package.search-request+json;charset=utf-8;version=v1:
            schema:
              $ref: '#/components/schemas/CosmosPackageSearchV1Request'
        required: true
      responses:
        200:
          description: Package search successful
          content:
            application/vnd.dcos.package.search-response+json;charset=utf-8;version=v1:
              schema:
                $ref: '#/components/schemas/CosmosPackageSearchV1Response'
        400:
          description: Package search failed due to a bad request
          content:
            application/vnd.dcos.package.error+json;charset=utf-8;version=v1:
              schema:
                $ref: '#/components/schemas/CosmosError'
        409:
          description: Package search failed due to a version conflict
          content:
            application/vnd.dcos.package.error+json;charset=utf-8;version=v1:
              schema:
                $ref: '#/components/schemas/CosmosError'
      tags:
      - cosmos
  /package/uninstall:
    post:
      operationId: package-uninstall
      parameters:
      - explode: false
        in: header
        name: Accept
        required: false
        schema:
          enum:
          - application/vnd.dcos.package.uninstall-response+json;charset=utf-8;version=v1
          type: string
        style: simple
      requestBody:
        content:
          application/vnd.dcos.package.uninstall-request+json;charset=utf-8;version=v1:
            schema:
              $ref: '#/components/schemas/CosmosPackageUninstallV1Request'
        required: true
      responses:
        200:
          description: Package successfully uninstalled
          content:
            application/vnd.dcos.package.uninstall-response+json;charset=utf-8;version=v1:
              schema:
                $ref: '#/components/schemas/CosmosPackageUninstallV1Response'
        400:
          description: Package could not be uninstalled due to a bad request
          content:
            application/vnd.dcos.package.error+json;charset=utf-8;version=v1:
              schema:
                $ref: '#/components/schemas/CosmosError'
        404:
          description: Package not found
          content:
            application/vnd.dcos.package.error+json;charset=utf-8;version=v1:
              schema:
                $ref: '#/components/schemas/CosmosError'
        409:
          description: Package could not be uninstalled due to a version conflict
          content:
            application/vnd.dcos.package.error+json;charset=utf-8;version=v1:
              schema:
                $ref: '#/components/schemas/CosmosError'
      tags:
      - cosmos

  /service/edgelb/ping:
    get:
      description: Healthcheck endpoint.
      operationId: Ping
      tags:
        - edgelb
      responses:
        "200":
          description: Pong.
          content:
            text/plain:
              schema:
                type: string
        default:
          description: Unexpected error.
          content:
            text/plain:
              schema:
                type: string
  /service/edgelb/version:
    get:
      description: Returns the installed Edge-LB package version.
      operationId: Version
      tags:
        - edgelb
      responses:
        "200":
          description: Version.
          content:
            text/plain:
              schema:
                type: string
        default:
          description: Unexpected error.
          content:
            text/plain:
              schema:
                type: string
  /service/edgelb/config:
    get:
      description: Get the entire configuration object including v1 and v2 pools.
      operationId: GetConfigContainer
      tags:
        - edgelb
      responses:
        "200":
          description: A configuration object containing all load balancer pools.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EdgelbConfigContainer"
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EdgelbError"
  /service/edgelb/pools/{name}:
    get:
      description: Returns a v1 or v2 load balancer pool based on a single name.
      operationId: GetPoolContainer
      tags:
        - edgelb
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Load balancer pool response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EdgelbPoolContainer"
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EdgelbError"
  /service/edgelb/v2/pools:
    get:
      description: Get all load balancer pools.
      operationId: V2GetPools
      tags:
        - edgelb
      responses:
        "200":
          description: An array of load balancer pools.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/EdgelbV2Pool"
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EdgelbError"
    post:
      description: Creates a new load balancer pool.
      operationId: V2CreatePool
      tags:
        - edgelb
      requestBody:
        $ref: "#/components/requestBodies/EdgelbV2Pool"
      responses:
        "200":
          description: Load Balancer Pool response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EdgelbV2Pool"
        "409":
          description: Conflict pool.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EdgelbError"
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EdgelbError"
  /service/edgelb/v2/pools/{name}:
    get:
      description: Returns a v2 load balancer pool based on a single name.
      operationId: V2GetPool
      tags:
        - edgelb
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Load balancer pool response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EdgelbV2Pool"
        "404":
          description: Pool not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EdgelbError"
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EdgelbError"
    put:
      description: Updates a new load balancer pool.
      operationId: V2UpdatePool
      tags:
        - edgelb
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/EdgelbV2Pool"
      responses:
        "200":
          description: Load Balancer Pool response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EdgelbV2Pool"
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EdgelbError"
    delete:
      description: Deletes a single load balancer pool based on the name supplied.
      operationId: V2DeletePool
      tags:
        - edgelb
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Load balancer deleted.
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EdgelbError"
        "404":
          description: Pool not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EdgelbError"
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EdgelbError"

components:
  requestBodies:
    SecretsV1Secret:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SecretsV1Secret'
      description: Secret value.
      required: true
    OIDCProviderConfig:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/OIDCProviderConfig"
      description: Provider config JSON object
      required: true
    SAMLProviderConfig:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SAMLProviderConfig"
      description: Provider config JSON object
      required: true

    EdgelbV2Pool:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/EdgelbV2Pool"
      required: true

  schemas:
    SecretsV1Secret:
      additionalProperties: false
      example:
        value: value
      properties:
        value:
          type: string
      type: object
    algo:
      enum:
      - sha256
      type: string
    assets:
      additionalProperties: false
      properties:
        container:
          $ref: '#/components/schemas/assets_container'
        uris:
          additionalProperties:
            type: string
          type: object
      type: object
    base64String:
      pattern: ^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{4}|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)$
      type: string
    binaries:
      additionalProperties: false
      minProperties: 1
      properties:
        darwin:
          $ref: '#/components/schemas/os'
        linux:
          $ref: '#/components/schemas/os'
        windows:
          $ref: '#/components/schemas/os'
      type: object
    cli:
      additionalProperties: false
      properties:
        binaries:
          $ref: '#/components/schemas/binaries'
      required:
      - binaries
      type: object
    cliInfo:
      additionalProperties: false
      properties:
        contentHash:
          items:
            $ref: '#/components/schemas/hash'
          minItems: 1
          type: array
        kind:
          enum:
          - executable
          - zip
          type: string
        url:
          format: uri
          pattern: ^https?://
          type: string
      required:
      - contentHash
      - kind
      - url
      type: object
    command:
      additionalProperties: false
      properties:
        pip:
          description: '[Deprecated v3.x] An array of strings representing of the
            requirements file to use for installing the subcommand for Pip. Each item
            is interpreted as a line in the requirements file.'
          items:
            type: string
          type: array
      required:
      - pip
      type: object
    config:
      additionalProperties: true
      type: object
    CosmosPackageDescribeV1Request:
      additionalProperties: false
      properties:
        packageName:
          type: string
        packageVersion:
          type: string
      required:
      - packageName
      type: object
    docker:
      additionalProperties:
        type: string
      type: object
    CosmosError:
      additionalProperties: false
      properties:
        type:
          type: string
        message:
          type: string
        data:
          type: object
      required:
      - message
      - type
    hash:
      additionalProperties: false
      properties:
        algo:
          $ref: '#/components/schemas/algo'
        value:
          type: string
      required:
      - algo
      - value
      type: object
    images:
      additionalProperties: false
      properties:
        icon-large:
          description: PNG icon URL, preferably 256 by 256 pixels.
          type: string
        icon-medium:
          description: PNG icon URL, preferably 128 by 128 pixels.
          type: string
        icon-small:
          description: PNG icon URL, preferably 48 by 48 pixels.
          type: string
        screenshots:
          items:
            description: PNG screen URL, preferably 1024 by 1024 pixels.
            type: string
          type: array
      type: object
    CosmosPackageInstallV1Request:
      additionalProperties: false
      properties:
        appId:
          type: string
        options:
          additionalProperties: true
          type: object
        packageName:
          type: string
        packageVersion:
          type: string
      required:
      - packageName
      type: object
    CosmosPackageInstallV1Response:
      additionalProperties: false
      properties:
        appId:
          type: string
        cli:
          $ref: '#/components/schemas/cli'
        packageName:
          type: string
        packageVersion:
          type: string
        postInstallNotes:
          type: string
      required:
      - packageName
      - packageVersion
      type: object
    CosmosPackageSearchV1Request:
      additionalProperties: false
      properties:
        query:
          type: string
      type: object
    CosmosPackageSearchV1Response:
      additionalProperties: false
      properties:
        packages:
          type: array
          items:
            $ref: '#/components/schemas/CosmosPackageSearchDetails'
    CosmosPackageSearchDetails:
      additionalProperties: false
      type: object
      properties:
        name:
          type: "string"
        currentVersion:
          type: "string"
        description:
          type: "string"
        framework:
          type: "boolean"
        selected:
          type: "boolean"
        images:
          $ref: '#/components/schemas/images'
        tags:
          items:
            pattern: '^[^\s]+$'
            type: string
          type: array
        versions:
          type: "object"
      required:
        - name
        - currentVersion
        - versions
        - description
        - framework
        - tags
    CosmosServiceUpdateV1Request:
      additionalProperties: false
      properties:
        appId:
          type: string
        options:
          additionalProperties: true
          type: object
        packageName:
          type: string
        packageVersion:
          type: string
        replace:
          description: If true any stored configuration will be ignored when producing the updated service configuration.
          type: boolean
      required:
      - appId
      - replace
      type: object
    CosmosServiceUpdateV1Response:
      additionalProperties: false
      properties:
        marathonDeploymentId:
          type: string
        package:
          $ref: '#/components/schemas/v50PackageDefinition'
        resolvedOptions:
          additionalProperties: true
          description: The result of merging the default package options with the user supplied options
          type: object
      required:
      - marathonDeploymentId
      - package
      - resolvedOptions
      type: object
    CosmosPackageUninstallV1Request:
      additionalProperties: false
      properties:
        appId:
          type: string
        packageName:
          type: string
        all:
          type: boolean
      required:
      - packageName
      type: object
    CosmosPackageUninstallV1Response:
      additionalProperties: false
      properties:
        appId:
          type: string
        packageName:
          type: string
        packageVersion:
          type: string
        postUninstallNotes:
          type: string
      required:
      - appId
      - packageName
      type: object
    license:
      additionalProperties: false
      properties:
        name:
          description: The name of the license. For example one of [Apache License Version 2.0 | MIT License | BSD License | Proprietary]
          type: string
        url:
          format: uri
          pattern: ^https?://
          type: string
      required:
      - name
      - url
      type: object
    marathon:
      additionalProperties: false
      properties:
        v2AppMustacheTemplate:
          pattern: ^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{4}|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)$
          type: string
      required:
      - v2AppMustacheTemplate
      type: object
    os:
      additionalProperties: false
      properties:
        x86-64:
          $ref: '#/components/schemas/cliInfo'
      required:
      - x86-64
      type: object
    CosmosServiceDescribeV1Request:
      additionalProperties: false
      properties:
        appId:
          type: string
        managerId:
          type: string
      required:
      - appId
      - managerId
      type: object
    CosmosPackageDeleteRepoV1Request:
      additionalProperties: false
      properties:
        name:
          type: string
        uri:
          format: uri
          pattern: ^https?://
          type: string
      type: object
    CosmosPackageDeleteRepoV1Response:
      additionalProperties: false
      properties:
        repositories:
          items:
            $ref: '#/components/schemas/pkgRepo'
          type: array
      required:
      - repositories
      type: object
    CosmosPackageAddRepoV1Request:
      additionalProperties: false
      properties:
        name:
          type: string
        uri:
          format: uri
          pattern: ^https?://
          type: string
        index:
          format: int32
          minimum: 0
          type: integer
      required:
      - name
      - uri
      type: object
    CosmosPackageAddRepoV1Response:
      additionalProperties: false
      properties:
        repositories:
          items:
            $ref: '#/components/schemas/pkgRepo'
          type: array
      required:
      - repositories
      type: object
    CosmosServiceDescribeV1Response:
      additionalProperties: false
      properties:
        downgradesTo:
          items:
            type: string
          type: array
        package:
          $ref: '#/components/schemas/v50PackageDefinition'
        resolvedOptions:
          additionalProperties: true
          description: The result of merging the default package options with the user supplied options
          type: object
        upgradesTo:
          items:
            type: string
          type: array
        userProvidedOptions:
          additionalProperties: true
          description: The options the user provided to run the service
          type: object
      required:
      - downgradesTo
      - package
      - upgradesTo
      type: object
    uris:
      additionalProperties:
        type: string
      type: object
    url:
      format: uri
      pattern: ^https?://
      type: string
    pkgRepo:
      additionalProperties: false
      properties:
        name:
          type: string
        uri:
          format: uri
          pattern: ^https?://
          type: string
      required:
      - name
      - uri
      type: object
    v30Resource:
      additionalProperties: false
      properties:
        assets:
          $ref: '#/components/schemas/assets'
        cli:
          $ref: '#/components/schemas/cli'
        images:
          $ref: '#/components/schemas/images'
      type: object
    CosmosPackageDescribeV3Response:
      additionalProperties: false
      properties:
        package:
          $ref: '#/components/schemas/v50PackageDefinition'
      required:
      - package
      type: object
    v50PackageDefinition:
      additionalProperties: false
      properties:
        command:
          $ref: '#/components/schemas/command'
        config:
          # Setting additionalProperties to true causes a JSON unmarshalling error.
          # In the future this property should be set to a JSON schema definition.
          additionalProperties: false
          type: object
        description:
          type: string
        downgradesTo:
          description: List of versions that this package can downgrade to. If the property is a list containing the string '*', this package can downgrade to any version. If the property is not set or the empty list, this package cannot downgrade.
          items:
            type: string
          type: array
        framework:
          default: false
          description: True if this package installs a new Mesos framework.
          type: boolean
        licenses:
          items:
            $ref: '#/components/schemas/license'
          type: array
        maintainer:
          type: string
        marathon:
          $ref: '#/components/schemas/marathon'
        minDcosReleaseVersion:
          description: The minimum DC/OS Release Version the package can run on.
          pattern: ^(?:0|[1-9][0-9]*)(?:\.(?:0|[1-9][0-9]*))*$
          type: string
        name:
          type: string
        packagingVersion:
          enum:
          - "5.0"
          type: string
        postInstallNotes:
          description: Post installation notes that would be useful to the user of this package.
          type: string
        postUninstallNotes:
          description: Post uninstallation notes that would be useful to the user of this package.
          type: string
        preInstallNotes:
          description: Pre installation notes that would be useful to the user of this package.
          type: string
        releaseVersion:
          description: Corresponds to the revision index from the universe directory structure
          format: int32
          minimum: 0
          type: integer
        resource:
          $ref: '#/components/schemas/v30Resource'
        scm:
          type: string
        selected:
          default: false
          description: Flag indicating if the package is selected in search results
          type: boolean
        tags:
          items:
            pattern: ^[^\s]+$
            type: string
          type: array
        upgradesFrom:
          description: List of versions that can upgrade to this package. If the property is a list containing the string '*', any version can upgrade to this package. If the property is not set or the empty list, no version can upgrade to this package.
          items:
            type: string
          type: array
        version:
          pattern: ^[-a-zA-Z0-9.]+$
          type: string
        website:
          type: string
        manager:
          $ref: '#/components/schemas/manager'
      required:
      - description
      - maintainer
      - name
      - packagingVersion
      - releaseVersion
      - tags
      - version
      type: object
    manager:
      additionalProperties: false
      properties:
        packageName:
          type: string
        minPackageVersion:
          type: string
      required:
      - packageName
      type: object
    assets_container:
      properties:
        docker:
          additionalProperties:
            type: string
          type: object
    LoginObject:
      type: object
      properties:
        uid:
          type: string
        password:
          type: string
        token:
          type: string
    AuthToken:
      type: object
      required:
        - token
      properties:
        token:
          type: string
      additionalProperties: false
    User:
      type: object
      required:
        - uid
        - url
        - description
        - is_remote
        - provider_type
        - provider_id
      properties:
        uid:
          type: string
        url:
          type: string
        description:
          type: string
        is_remote:
          type: boolean
        is_service:
          type: boolean
        public_key:
          type: string
        provider_type:
          type: string
        provider_id:
          type: string
      additionalProperties: false
    UserCreate:
      type: object
      properties:
        description:
          type: string
        password:
          type: string
        public_key:
          type: string
        provider_type:
          type: string
        provider_id:
          type: string
        cluster_url:
          type: string
        creator_uid:
          type: string
      additionalProperties: false
    UserUpdate:
      type: object
      properties:
        description:
          type: string
        password:
          type: string
      additionalProperties: false
    OIDCProviderConfig:
      type: object
      required:
        - description
        - issuer
        - base_url
        - client_secret
        - client_id
      properties:
        description:
          type: string
        issuer:
          type: string
        base_url:
          type: string
        client_secret:
          type: string
        client_id:
          type: string
        verify_server_certificate:
          type: boolean
        ca_certs:
          type: string
      additionalProperties: false
    Action:
      type: object
      required:
        - name
        - url
      properties:
        name:
          type: string
        url:
          type: string
      additionalProperties: false
    UserGroups:
      type: object
      properties:
        array:
          type: array
          items:
            type: object
            required:
              - group
              - membershipurl
            properties:
              membershipurl:
                type: string
              group:
                $ref: "#/components/schemas/Group"
            additionalProperties: false
    UserPermissions:
      type: object
      properties:
        direct:
          type: array
          items:
            type: object
            required:
              - rid
              - description
              - aclurl
              - actions
            properties:
              rid:
                type: string
              description:
                type: string
              aclurl:
                type: string
              actions:
                type: array
                items:
                  $ref: "#/components/schemas/Action"
            additionalProperties: false
        groups:
          type: array
          items:
            type: object
            required:
              - rid
              - gid
              - description
              - aclurl
              - membershipurl
              - actions
            properties:
              rid:
                type: string
              gid:
                type: string
              description:
                type: string
              aclurl:
                type: string
              membershipurl:
                type: string
              actions:
                type: array
                items:
                  $ref: "#/components/schemas/Action"
            additionalProperties: false
      additionalProperties: false
    Group:
      type: object
      required:
        - gid
        - url
        - description
        - provider_type
      properties:
        gid:
          type: string
        url:
          type: string
        description:
          type: string
        provider_type:
          type: string
      additionalProperties: false
    GroupCreate:
      type: object
      required:
        - description
      properties:
        description:
          type: string
        provider_type:
          type: string
      additionalProperties: false
    GroupUpdate:
      type: object
      required:
        - description
      properties:
        description:
          type: string
      additionalProperties: false
    GroupUsers:
      type: object
      properties:
        array:
          type: array
          items:
            type: object
            required:
              - membershipurl
              - user
            properties:
              membershipurl:
                type: string
              user:
                $ref: "#/components/schemas/User"
      additionalProperties: false
    GroupPermissions:
      type: object
      properties:
        array:
          type: array
          items:
            type: object
            required:
              - rid
              - description
              - aclurl
              - actions
            properties:
              rid:
                type: string
              description:
                type: string
              aclurl:
                type: string
              actions:
                type: array
                items:
                  $ref: "#/components/schemas/Action"
      additionalProperties: false
    ACL:
      type: object
      required:
        - rid
        - url
        - description
      properties:
        rid:
          type: string
        url:
          type: string
        description:
          type: string
      additionalProperties: false
    ACLCreate:
      type: object
      required:
        - description
      properties:
        description:
          type: string
      additionalProperties: false
    ACLUpdate:
      type: object
      required:
        - description
      properties:
        description:
          type: string
      additionalProperties: false
    ACLPermissions:
      type: object
      properties:
        groups:
          type: array
          items:
            type: object
            required:
              - gid
              - groupurl
              - actions
            properties:
              gid:
                type: string
              groupurl:
                type: string
              actions:
                type: array
                items:
                  $ref: "#/components/schemas/Action"
        users:
          type: array
          items:
            type: object
            required:
              - uid
              - userurl
              - actions
            properties:
              uid:
                type: string
              userurl:
                type: string
              actions:
                type: array
                items:
                  $ref: "#/components/schemas/Action"
      additionalProperties: false
    ActionAllowed:
      type: object
      required:
        - allowed
      properties:
        allowed:
          type: boolean
      additionalProperties: false
    SAMLProviderConfig:
      type: object
      required:
        - description
        - idp_metadata
        - sp_base_url
      properties:
        description:
          type: string
        idp_metadata:
          type: string
        sp_base_url:
          type: string
      additionalProperties: false
    SAMLACSCallbackUrlObject:
      type: object
      required:
        - acs-callback-url
      properties:
        acs-callback-url:
          type: string
      additionalProperties: false
    LDAPUserSearchConfig:
      type: object
      required:
        - search-base
        - search-filter-template
      properties:
        search-base:
          type: string
        search-filter-template:
          type: string
      additionalProperties: false
    LDAPGroupSearchConfig:
      type: object
      required:
        - search-base
        - search-filter-template
      properties:
        search-base:
          type: string
        search-filter-template:
          type: string
        member-attributes:
          type: array
          items:
            type: string
      additionalProperties: false
    LDAPConfiguration:
      type: object
      required:
        - host
        - port
        - enforce-starttls
        - use-ldaps
      properties:
        host:
          type: string
        dntemplate:
          type: string
        port:
          type: integer
        enforce-starttls:
          type: boolean
        use-ldaps:
          type: boolean
        lookup-dn:
          type: string
        lookup-password:
          type: string
        user-search:
          $ref: "#/components/schemas/LDAPUserSearchConfig"
        group-search:
          $ref: "#/components/schemas/LDAPGroupSearchConfig"
        ca-certs:
          type: string
        client-cert:
          type: string
      additionalProperties: false
    LDAPImportUserObject:
      type: object
      required:
        - username
      properties:
        username:
          type: string
      additionalProperties: false
    LDAPImportGroupObject:
      type: object
      required:
        - groupname
      properties:
        groupname:
          type: string
      additionalProperties: false
    LDAPTestCredentials:
      type: object
      required:
        - uid
        - password
      properties:
        uid:
          type: string
        password:
          type: string
      additionalProperties: false
    LDAPTestResultObject:
      type: object
      required:
        - code
        - description
      properties:
        code:
          type: string
        description:
          type: string
      additionalProperties: false

    EdgelbV2Pool:
      type: object
      description: The pool contains information on resources that the pool needs. Changes
        make to this section will relaunch the tasks.
      properties:
        poolHealthcheckGracePeriod:
          description: Pool tasks healthcheck grace period (in seconds)
          type: integer
          format: int32
          minimum: 1
        poolHealthcheckInterval:
          description: Pool tasks healthcheck interval (in seconds)
          type: integer
          format: int32
          minimum: 1
        poolHealthcheckMaxFail:
          description: Pool tasks healthcheck maximum number of consecutive failures before
            declaring as unhealthy
          type: integer
          format: int32
          minimum: 1
        poolHealthcheckTimeout:
          description: Maximum amount of time that Mesos will wait for the healthcheck
            container to finish executing
          type: integer
          format: int32
          minimum: 2
        apiVersion:
          $ref: "#/components/schemas/APIVersion"
        name:
          type: string
          description: The pool name.
        namespace:
          type: string
          description: The DC/OS space (sometimes also referred to as a "group").
          nullable: true
        packageName:
          type: string
        packageVersion:
          type: string
        role:
          type: string
          description: Mesos role for load balancers. Defaults to "slave_public" so that
            load balancers will be run on public agents. Use "*" to run load
            balancers on private agents. Read more about Mesos roles at
            http://mesos.apache.org/documentation/latest/roles/
        principal:
          type: string
          description: Mesos principal for pool framework authentication. If omitted or
            left blank, the service account used to install Edge-LB will be used
            if present.
          nullable: true
        secretName:
          type: string
          description: Service account secret name for pool framework authentication. If
            omitted or left blank, the service account used to install Edge-LB
            will be used if present.
          nullable: true
        cpus:
          type: number
        cpusAdminOverhead:
          type: number
        mem:
          type: integer
          description: Memory requirements (in MB)
          format: int32
        memAdminOverhead:
          type: integer
          description: Memory requirements (in MB)
          format: int32
        disk:
          type: integer
          description: Disk size (in MB)
          format: int32
        count:
          type: integer
          format: int32
          description: Number of load balancer instances in the pool.
          nullable: true
        constraints:
          type: string
          description: Marathon style constraints for load balancer instance placement.
          nullable: true
        ports:
          type: array
          description: >-
            Override ports to allocate for each load balancer instance. Defaults
            to {{haproxy.frontends[].bindPort}} and
              {{haproxy.stats.bindPort}}.
            Use this field to pre-allocate all needed ports with or
              without the frontends present. For example: [80, 443, 9090].
            If the length of the ports array is not zero, only the
              ports specified will be allocated by the pool scheduler.
          items:
            type: integer
            format: int32
        secrets:
          type: array
          description: DC/OS secrets.
          items:
            type: object
            properties:
              secret:
                description: Secret name
                type: string
              file:
                description: |-
                  File name.
                  The file "myfile" will be found at "$SECRETS/myfile"
                type: string
        environmentVariables:
          type: object
          description: >-
            Environment variables to pass to tasks.

            Prefix with "ELB_FILE_" and it will be written to a file. For example, the contents of "ELB_FILE_MYENV" will be written to "$ENVFILE/ELB_FILE_MYENV".
          additionalProperties:
            type: string
        autoCertificate:
          type: boolean
          description: >-
            Autogenerate a self-signed SSL/TLS certificate. It is not generated
            by default.

            It will be written to "$AUTOCERT".
          x-go-name: AutoCertEnabled
        virtualNetworks:
          type: array
          description: Virtual networks to join.
          items:
            type: object
            properties:
              name:
                description: The name of the virtual network to join.
                type: string
              labels:
                description: Labels to pass to the virtual network plugin.
                additionalProperties:
                  type: string
        haproxy:
          $ref: "#/components/schemas/V2Haproxy"
    V2Haproxy:
      type: object
      properties:
        stats:
          $ref: "#/components/schemas/V2Stats"
        frontends:
          description: Array of frontends.
          type: array
          items:
            $ref: "#/components/schemas/V2Frontend"
        backends:
          description: Array of backends.
          type: array
          items:
            $ref: "#/components/schemas/V2Backend"
    V2Stats:
      type: object
      properties:
        bindAddress:
          type: string
        bindPort:
          type: integer
          format: int32
    V2Frontend:
      type: object
      description: The Frontend maps to the HAProxy frontend. This includes information
        such as what addresses and ports to listen on, what SSL/TLS certificates
        to use, and which backends to route to.
      properties:
        name:
          description: Defaults to frontend_{{bindAddress}}_{{bindPort}}.
          type: string
        bindAddress:
          description: Only use characters that are allowed in the frontend name. Known
            invalid frontend name characters include "*", "[", and "]".
          type: string
        bindPort:
          description: The port (e.g. 80 for HTTP or 443 for HTTPS) that this frontend will
            bind to.
          type: integer
          format: int32
          nullable: true
        bindModifier:
          description: Additional text to put in the bind field
          type: string
        certificates:
          type: array
          items:
            description: >-
              SSL/TLS certificates in the load balancer.

              For secrets, use "$SECRETS/my_file_name" For environment files, use "$ENVFILE/my_file_name" For autoCertificate, use "$AUTOCERT"
            type: string
        redirectToHttps:
          type: object
          description: Setting this to the empty object is enough to redirect all traffic
            from HTTP (this frontend) to HTTPS (port 443).
          properties:
            except:
              type: array
              description: One may additionally set a whitelist of fields that must be
                matched to allow HTTP.
              items:
                type: object
                description: Boolean AND will be applied with every selected value
                properties:
                  host:
                    type: string
                    description: Match on host
                  pathBeg:
                    type: string
                    description: Match on path
        miscStrs:
          description: Additional template lines inserted before use_backend
          type: array
          items:
            type: string
        protocol:
          $ref: "#/components/schemas/V2Protocol"
        linkBackend:
          type: object
          description: This describes what backends to send traffic to. This can be
            expressed with a variety of filters such as matching on the hostname
            or the HTTP URL path.
          properties:
            defaultBackend:
              type: string
              description: This is default backend that is routed to if none of the other
                filters are matched.
            map:
              type: array
              description: This is an optional field that specifies a mapping to various
                backends. These rules are applied in order.
              items:
                type: object
                description: '"backend" and at least one of the condition fields must be
                  filled out. If multiple conditions are filled out they will be
                  combined with a boolean "AND".'
                properties:
                  backend:
                    type: string
                  hostEq:
                    description: All lowercase.
                    type: string
                  hostReg:
                    description: All lowercase. It is possible for a port (e.g.
                      "foo.com:80") to be in this regex!
                    type: string
                  pathBeg:
                    type: string
                  pathEnd:
                    type: string
                  pathReg:
                    type: string
    V2Backend:
      type: object
      properties:
        name:
          type: string
          description: This is name that frontends refer to.
        protocol:
          $ref: "#/components/schemas/V2Protocol"
        rewriteHttp:
          $ref: "#/components/schemas/V2RewriteHttp"
        balance:
          description: Load balancing strategy. e.g. roundrobin, leastconn, etc.
          type: string
        customCheck:
          type: object
          description: This is used to specify alternate forms of healthchecks
          properties:
            httpchk:
              type: boolean
            httpchkMiscStr:
              type: string
            sslHelloChk:
              type: boolean
            miscStr:
              type: string
        miscStrs:
          description: Additional template lines inserted before servers
          type: array
          items:
            type: string
        services:
          description: Array of backend service selectors.
          type: array
          items:
            $ref: "#/components/schemas/V2Service"
    V2RewriteHttp:
      type: object
      properties:
        host:
          description: Set the host header value
          type: string
        path:
          type: object
          description: Rewrite the HTTP URL path. Adding a slash to fromPath usually is not
            necessary.
          properties:
            fromPath:
              type: string
              nullable: true
            toPath:
              type: string
              nullable: true
        request:
          $ref: "#/components/schemas/V2RewriteHttpRequest"
        response:
          $ref: "#/components/schemas/V2RewriteHttpResponse"
        sticky:
          type: object
          description: >-
            Sticky sessions via a cookie.

            To use the default values (recommended), set this field to the empty object.
          properties:
            enabled:
              type: boolean
              nullable: true
            customStr:
              type: string
    V2RewriteHttpRequest:
      description: >-
        Rewrite the request.

        To use the default values (recommended), set this field to the empty object.
      type: object
      properties:
        forwardfor:
          type: boolean
          nullable: true
        xForwardedPort:
          type: boolean
          nullable: true
        xForwardedProtoHttpsIfTls:
          type: boolean
          nullable: true
        setHostHeader:
          type: boolean
          nullable: true
        rewritePath:
          type: boolean
          nullable: true
    V2RewriteHttpResponse:
      description: >-
        Rewrite the response.

        To use the default values (recommended), set this field to the empty object.
      type: object
      properties:
        rewriteLocation:
          type: boolean
          nullable: true
    V2Service:
      type: object
      properties:
        marathon:
          type: object
          properties:
            serviceID:
              description: Marathon pod or application ID.
              type: string
            serviceIDPattern:
              type: string
            containerName:
              description: Marathon pod container name, optional unless using Marathon pods.
              type: string
            containerNamePattern:
              type: string
        mesos:
          type: object
          properties:
            frameworkName:
              description: Mesos framework name.
              type: string
            frameworkNamePattern:
              type: string
            frameworkID:
              description: Mesos framework ID.
              type: string
            frameworkIDPattern:
              type: string
            taskName:
              description: Mesos task name.
              type: string
            taskNamePattern:
              type: string
            taskID:
              description: Mesos task ID.
              type: string
            taskIDPattern:
              type: string
        endpoint:
          $ref: "#/components/schemas/V2Endpoint"
    V2Endpoint:
      type: object
      properties:
        type:
          type: string
          enum:
            - AUTO_IP
            - AGENT_IP
            - CONTAINER_IP
            - ADDRESS
        miscStr:
          description: Append arbitrary string to add to the end of the "server" directive.
          type: string
        check:
          description: Enable health checks. These are by default TCP health checks. For
            more options see "customCheck". These are required for DNS
            resolution to function properly.
          type: object
          properties:
            enabled:
              type: boolean
              nullable: true
            customStr:
              type: string
        address:
          description: Server address override, can be used to specify a cluster internal
            address such as a VIP.
          type: string
        port:
          type: integer
          format: int32
        portName:
          type: string
        allPorts:
          type: boolean
    V2Protocol:
      type: string
      enum:
        - HTTP
        - HTTPS
        - TCP
        - TLS
      x-enum-varnames:
        - V2ProtocolHTTP
        - V2ProtocolHTTPS
        - V2ProtocolTCP
        - V2ProtocolTLS
    APIVersion:
      type: string
      enum:
        - V1
        - V2
    EdgelbConfigContainer:
      type: object
      description: Object used internally as an interface to handle multple model versions.
      properties:
        pools:
          type: array
          description: Array of pool containers.
          items:
            $ref: "#/components/schemas/EdgelbPoolContainer"
    EdgelbPoolContainer:
      type: object
      description: Object used internally as an interface to handle multple model versions.
      properties:
        apiVersion:
          $ref: "#/components/schemas/APIVersion"
        name:
          type: string
        namespace:
          type: string
          nullable: true
        v2:
          $ref: "#/components/schemas/EdgelbV2Pool"
    EdgelbError:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
  securitySchemes:
    token:
      in: header
      name: Authorization
      type: apiKey
